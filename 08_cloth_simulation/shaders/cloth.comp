#version 460

layout (local_size_x = 10, local_size_y = 10, local_size_z = 1) in;

layout (location = 0) uniform float SpringRestLength;
layout (location = 1) uniform float SpringStiffness;
layout (location = 2) uniform float SpringDamping;
layout (location = 3) uniform float ShearRestLength;
layout (location = 4) uniform float ShearStiffness;
layout (location = 5) uniform float ShearDamping;
layout (location = 6) uniform float FlexionRestLength;
layout (location = 7) uniform float FlexionStiffness;
layout (location = 8) uniform float FlexionDamping;

layout (location = 9) uniform float GravityConstant;
layout (location = 10) uniform float GravityDamping;

layout (location = 11) uniform float DeltaTime;
layout (location = 12) uniform float Mass;
layout (location = 13) uniform mat4 ClothWorldMatrix;

layout (location = 14) uniform float SphereRadius;
layout (location = 15) uniform vec3 SpherePosition;
layout (location = 16) uniform mat4 SphereWorldMatrix;

struct Attributes
{
    float x, y, z, nx, ny, nz, s, t;
};

layout (binding = 0, std430) buffer PrevPoints {
    Attributes Pn_prev[];
};

layout (binding = 1, std430) buffer CurrPoints {
    Attributes Pn[];
};

layout (binding = 2, std430) buffer NextPoints {
    Attributes Pn_next[];
};

struct Spring
{
    uint index; // 0xFFFFFFFF means that it is not the neighbor of the current vertex.
    float k;
    float rest_length;
    float damping;
};
Spring neighbors[12];

const float zero = 0.0f;
const float one = 1.0f;

vec4 Gravity = vec4(zero, GravityConstant, zero, zero);

void setNeighborSprings(uint index, uint cols, uint rows)
{
    neighbors[0].index = 0 < gl_GlobalInvocationID.y ? index - cols : 0xFFFFFFFF;                     // top
    neighbors[1].index = gl_GlobalInvocationID.y < rows - 1 ? index + cols : 0xFFFFFFFF;              // bottom
    neighbors[2].index = 0 < gl_GlobalInvocationID.x ? index - 1 : 0xFFFFFFFF;                        // left
    neighbors[3].index = gl_GlobalInvocationID.x < cols - 1 ? index + 1 : 0xFFFFFFFF;                 // right
    neighbors[4].index = neighbors[0].index != 0xFFFFFFFF && neighbors[2].index != 0xFFFFFFFF ?
    neighbors[0].index - 1 : 0xFFFFFFFF;                                                              // top-left
    neighbors[5].index = neighbors[0].index != 0xFFFFFFFF && neighbors[3].index != 0xFFFFFFFF ?
    neighbors[0].index + 1 : 0xFFFFFFFF;                                                              // top-right
    neighbors[6].index = neighbors[1].index != 0xFFFFFFFF && neighbors[2].index != 0xFFFFFFFF ?
    neighbors[1].index - 1 : 0xFFFFFFFF;                                                              // bottom-left
    neighbors[7].index = neighbors[1].index != 0xFFFFFFFF && neighbors[3].index != 0xFFFFFFFF ?
    neighbors[1].index + 1 : 0xFFFFFFFF;                                                              // bottom-right
    neighbors[8].index = 1 < gl_GlobalInvocationID.y ? neighbors[0].index - cols : 0xFFFFFFFF;        // top-top
    neighbors[9].index = gl_GlobalInvocationID.y < rows - 2 ? neighbors[1].index + cols : 0xFFFFFFFF; // bottom-bottom
    neighbors[10].index = 1 < gl_GlobalInvocationID.x ? neighbors[2].index - 1 : 0xFFFFFFFF;          // left-left
    neighbors[11].index = gl_GlobalInvocationID.x < cols - 2 ? neighbors[3].index + 1 : 0xFFFFFFFF;   // right-right

    for (int i = 0; i < 4; ++i) {
        neighbors[i].k = SpringStiffness;
        neighbors[i].rest_length = SpringRestLength;
        neighbors[i].damping = SpringDamping;
    }
    for (int i = 4; i < 8; ++i) {
        neighbors[i].k = ShearStiffness;
        neighbors[i].rest_length = SpringRestLength;
        neighbors[i].damping = ShearDamping;
    }
    for (int i = 8; i < 12; ++i) {
        neighbors[i].k = FlexionStiffness;
        neighbors[i].rest_length = SpringRestLength * 2;
        neighbors[i].damping = FlexionDamping;
    }
}

vec4 calculateMassSpringForce(vec4 p_curr, vec4 velocity)
{
    vec4 force = vec4(zero, zero, zero, zero);
    for (int i = 0; i < 12; ++i) {
        uint n = neighbors[i].index;
        if (n == 0xFFFFFFFF) continue;

        vec4 neighbor = vec4(Pn[n].x, Pn[n].y, Pn[n].z, one);
        vec4 neighbor_prev = vec4(Pn_prev[n].x, Pn_prev[n].y, Pn_prev[n].z, one);
        vec4 neighbor_velocity = (neighbor - neighbor_prev) / DeltaTime;
        vec4 dl = p_curr - neighbor;
        vec4 dv = velocity - neighbor_velocity;
        float l = length(dl);
        float spring_force = neighbors[i].k * (neighbors[i].rest_length - l);
        float damping_force = neighbors[i].damping * dot(dl, dv) / l;
        force += (spring_force + damping_force) * normalize(dl);
    }
    return force;
}

vec4 calculateGravityForce(vec4 velocity)
{
    return Mass * Gravity + velocity * GravityDamping;
}

bool calculateFrictionOnSphereIfCollided(inout vec4 force, vec4 p_curr, vec4 velocity)
{
    const float epsilon = 0.0005f;
    vec4 position_in_wc = ClothWorldMatrix * p_curr;
    vec4 sphere_in_wc = SphereWorldMatrix * vec4(SpherePosition, one);
    vec3 d = (position_in_wc - sphere_in_wc).xyz;
    float distance = length(d);
    if (distance < SphereRadius + epsilon) {
        vec3 normal = normalize(d);
        vec3 tangent = normalize(cross(cross(normal, force.xyz), normal));
        float normal_force = max(dot(force.xyz, -normal), zero);
        float horizontal_force = max(dot(force.xyz, tangent), zero);
        if (normal_force > zero) {
            float friction = 0.5f * normal_force;
            force = max(horizontal_force - friction, zero) * vec4(tangent, zero);
            return length(force) > zero;
        }
        else return true;
    }
    return true;
}

vec3 update(vec4 force, vec4 p_curr, vec4 velocity, uint index)
{
    vec4 acceleration = force / Mass;
    vec4 updated = p_curr + velocity * DeltaTime + acceleration * DeltaTime * DeltaTime;
    return updated.xyz;
}

bool detectCollisionWithSphere(inout vec3 updated, uint index)
{
    const float epsilon = 0.05f;
    vec4 updated_in_wc = ClothWorldMatrix * vec4(updated, one);
    vec4 sphere_in_wc = SphereWorldMatrix * vec4(SpherePosition, one);
    vec3 d = (updated_in_wc - sphere_in_wc).xyz;
    float distance = length(d);
    if (distance < SphereRadius + epsilon) {
        updated_in_wc.xyz += (SphereRadius - distance) * normalize(d);
        updated = vec3(inverse(ClothWorldMatrix) * updated_in_wc);
        return true;
    }
    return false;
}

void detectCollisionWithFloor(inout vec3 updated, uint index)
{
    vec4 updated_in_wc = ClothWorldMatrix * vec4(updated, one);
    if (updated_in_wc.y < 0.0f) updated.y = Pn[index].y;
}

void main()
{
    uvec3 points = gl_NumWorkGroups * gl_WorkGroupSize;
    uint index = gl_GlobalInvocationID.y * points.x + gl_GlobalInvocationID.x;

    vec4 p_curr = vec4(Pn[index].x, Pn[index].y, Pn[index].z, one);
    vec4 p_prev = vec4(Pn_prev[index].x, Pn_prev[index].y, Pn_prev[index].z, one);
    vec4 velocity = (p_curr - p_prev) / DeltaTime;

    setNeighborSprings(index, points.x, points.y);

    vec4 force = calculateMassSpringForce( p_curr, velocity ) + calculateGravityForce( velocity );
    bool to_be_moved = calculateFrictionOnSphereIfCollided( force, p_curr, velocity );

    vec3 updated = update( force, p_curr, velocity, index );

    bool collided = detectCollisionWithSphere( updated, index );
    if (!collided && !to_be_moved) {
        updated.x = Pn[index].x;
        updated.y = Pn[index].y;
        updated.z = Pn[index].z;
    }
    detectCollisionWithFloor( updated, index );

    Pn_next[index].x = updated.x;
    Pn_next[index].y = updated.y;
    Pn_next[index].z = updated.z;
    Pn_next[index].s = Pn[index].s;
    Pn_next[index].t = Pn[index].t;
}