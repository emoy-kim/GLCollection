#version 460

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (location = 0) uniform float SpringRestLength;
layout (location = 1) uniform float SpringStiffness;
layout (location = 2) uniform float SpringDamping;
layout (location = 3) uniform float ShearRestLength;
layout (location = 4) uniform float ShearStiffness;
layout (location = 5) uniform float ShearDamping;
layout (location = 6) uniform float FlexionRestLength;
layout (location = 7) uniform float FlexionStiffness;
layout (location = 8) uniform float FlexionDamping;

layout (location = 9) uniform float GravityConstant;
layout (location = 10) uniform float GravityDamping;

layout (location = 11) uniform float DeltaTime;
layout (location = 12) uniform float Mass;
layout (location = 13) uniform ivec2 ClothPointNumSize;
layout (location = 14) uniform mat4 ClothWorldMatrix;

layout (location = 15) uniform float SphereRadius;
layout (location = 16) uniform vec3 SpherePosition;
layout (location = 17) uniform mat4 SphereWorldMatrix;

struct Attributes
{
    float x, y, z, nx, ny, nz, s, t;
};

layout (binding = 0, std430) buffer PrevPoints { Attributes Pn_prev[]; };

layout (binding = 1, std430) buffer CurrPoints { Attributes Pn[]; };

layout (binding = 2, std430) buffer NextPoints { Attributes Pn_next[]; };

struct Spring
{
    int index;
    float k;
    float rest_length;
    float damping;
};
Spring neighbors[12];

const float zero = 0.0f;
const float one = 1.0f;
const int top = 0;
const int bottom = 1;
const int left = 2;
const int right = 3;
const int top_left = 4;
const int top_right = 5;
const int bottom_left = 6;
const int bottom_right = 7;
const int top_top = 8;
const int bottom_bottom = 9;
const int left_left = 10;
const int right_right = 11;
const int no_neighbor = -1;

vec4 Gravity = vec4(zero, GravityConstant, zero, zero);

void setNeighborSprings(in int index, in int x, in int y)
{
    neighbors[top].index = 0 < y ? index - ClothPointNumSize.x : no_neighbor;
    neighbors[bottom].index = y < ClothPointNumSize.y - 1 ? index + ClothPointNumSize.x : no_neighbor;
    neighbors[left].index = 0 < x ? index - 1 : no_neighbor;
    neighbors[right].index = x < ClothPointNumSize.x - 1 ? index + 1 : no_neighbor;
    neighbors[top_left].index = neighbors[top].index != no_neighbor && neighbors[left].index != no_neighbor ?
        neighbors[top].index - 1 :
        no_neighbor;
    neighbors[top_right].index = neighbors[top].index != no_neighbor && neighbors[right].index != no_neighbor ?
        neighbors[top].index + 1 :
        no_neighbor;
    neighbors[bottom_left].index = neighbors[bottom].index != no_neighbor && neighbors[left].index != no_neighbor ?
        neighbors[bottom].index - 1 :
        no_neighbor;
    neighbors[bottom_right].index = neighbors[bottom].index != no_neighbor && neighbors[right].index != no_neighbor ?
        neighbors[bottom].index + 1 :
        no_neighbor;
    neighbors[top_top].index = 1 < y ? neighbors[top].index - ClothPointNumSize.x : no_neighbor;
    neighbors[bottom_bottom].index = y < ClothPointNumSize.y - 2 ?
        neighbors[bottom].index + ClothPointNumSize.x :
        no_neighbor;
    neighbors[left_left].index = 1 < x ? neighbors[left].index - 1 : no_neighbor;
    neighbors[right_right].index = x < ClothPointNumSize.x - 2 ? neighbors[right].index + 1 : no_neighbor;

    for (int i = 0; i < 4; ++i) {
        neighbors[i].k = SpringStiffness;
        neighbors[i].rest_length = SpringRestLength;
        neighbors[i].damping = SpringDamping;
    }
    for (int i = 4; i < 8; ++i) {
        neighbors[i].k = ShearStiffness;
        neighbors[i].rest_length = SpringRestLength;
        neighbors[i].damping = ShearDamping;
    }
    for (int i = 8; i < 12; ++i) {
        neighbors[i].k = FlexionStiffness;
        neighbors[i].rest_length = SpringRestLength * 2;
        neighbors[i].damping = FlexionDamping;
    }
}

vec4 calculateMassSpringForce(vec4 p_curr, vec4 velocity)
{
    vec4 force = vec4(zero);
    for (int i = 0; i < 12; ++i) {
        uint n = neighbors[i].index;
        if (n == no_neighbor) continue;

        vec4 neighbor = vec4(Pn[n].x, Pn[n].y, Pn[n].z, one);
        vec4 neighbor_prev = vec4(Pn_prev[n].x, Pn_prev[n].y, Pn_prev[n].z, one);
        vec4 neighbor_velocity = (neighbor - neighbor_prev) / DeltaTime;
        vec4 dl = p_curr - neighbor;
        vec4 dv = velocity - neighbor_velocity;
        float l = length(dl);
        float spring_force = neighbors[i].k * (neighbors[i].rest_length - l);
        float damping_force = neighbors[i].damping * dot(dl, dv) / l;
        force += (spring_force + damping_force) * normalize(dl);
    }
    return force;
}

vec4 calculateGravityForce(vec4 velocity)
{
    return Mass * Gravity + velocity * GravityDamping;
}

bool calculateFrictionOnSphereIfCollided(inout vec4 force, vec4 p_curr, vec4 velocity)
{
    const float epsilon = 0.0005f;
    vec4 position_in_wc = ClothWorldMatrix * p_curr;
    vec4 sphere_in_wc = SphereWorldMatrix * vec4(SpherePosition, one);
    vec3 d = (position_in_wc - sphere_in_wc).xyz;
    float distance = length( d );
    if (distance < SphereRadius + epsilon) {
        vec3 normal = normalize( d );
        vec3 tangent = normalize( cross( cross( normal, force.xyz ), normal ) );
        float normal_force = max( dot( force.xyz, -normal ), zero );
        float horizontal_force = max( dot( force.xyz, tangent ), zero );
        if (normal_force > zero) {
            float friction = 0.5f * normal_force;
            force = max( horizontal_force - friction, zero ) * vec4(tangent, zero);
            return length( force ) > zero;
        }
        else return true;
    }
    return true;
}

vec3 update(vec4 force, vec4 p_curr, vec4 velocity)
{
    vec4 acceleration = force / Mass;
    vec4 updated = p_curr + velocity * DeltaTime + acceleration * DeltaTime * DeltaTime;
    return updated.xyz;
}

bool detectCollisionWithSphere(inout vec3 updated)
{
    const float epsilon = 0.05f;
    vec4 updated_in_wc = ClothWorldMatrix * vec4(updated, one);
    vec4 sphere_in_wc = SphereWorldMatrix * vec4(SpherePosition, one);
    vec3 d = (updated_in_wc - sphere_in_wc).xyz;
    float distance = length( d );
    if (distance < SphereRadius + epsilon) {
        updated_in_wc.xyz += (SphereRadius - distance) * normalize( d );
        updated = vec3(inverse( ClothWorldMatrix ) * updated_in_wc);
        return true;
    }
    return false;
}

void detectCollisionWithFloor(inout vec3 updated, int index)
{
    vec4 updated_in_wc = ClothWorldMatrix * vec4(updated, one);
    if (updated_in_wc.y < 0.0f) updated.y = Pn[index].y;
}

void main()
{
    int x = int(gl_GlobalInvocationID.x);
    int y = int(gl_GlobalInvocationID.y);
    if (x >= ClothPointNumSize.x || y >= ClothPointNumSize.y) return;

    int index = y * ClothPointNumSize.x + x;
    vec4 p_curr = vec4(Pn[index].x, Pn[index].y, Pn[index].z, one);
    vec4 p_prev = vec4(Pn_prev[index].x, Pn_prev[index].y, Pn_prev[index].z, one);
    vec4 velocity = (p_curr - p_prev) / DeltaTime;

    setNeighborSprings( index, x, y );

    vec4 force = calculateMassSpringForce( p_curr, velocity ) + calculateGravityForce( velocity );
    bool to_be_moved = calculateFrictionOnSphereIfCollided( force, p_curr, velocity );

    vec3 updated = update( force, p_curr, velocity );

    bool collided = detectCollisionWithSphere( updated );
    if (!collided && !to_be_moved) {
        updated.x = Pn[index].x;
        updated.y = Pn[index].y;
        updated.z = Pn[index].z;
    }
    detectCollisionWithFloor( updated, index );

    Pn_next[index].x = updated.x;
    Pn_next[index].y = updated.y;
    Pn_next[index].z = updated.z;
    Pn_next[index].s = Pn[index].s;
    Pn_next[index].t = Pn[index].t;
}